#!/usr/bin/perl -w
# ${license-info}
# ${developer-info}
# ${author-info}
# ${build-info}
#
# Initialise local config cache
#

BEGIN {
    # use perl libs in /usr/lib/perl
    unshift(@INC, '/usr/lib/perl');
}

use strict;
use warnings;
use Getopt::Long;
use File::Path;
use EDG::WP4::CCM::CCfg;

# Options
my $debug = undef;
my $config = undef;
my $cache_root = undef;
my $world_readable = 0;
my $group_readable = undef;

sub Quit
{
    my $msg = shift;

    if ($msg) {
        print STDERR "cache-initialise: $msg\n";
        exit(1);
    } else {
        exit(0);
    }
}

sub Debug
{
    my $msg = shift;
    if (defined($debug)) {
        print $msg . "\n";
    }

    return 'ok';
}

sub Config
{
    EDG::WP4::CCM::CCfg::initCfg(shift);

    $cache_root = EDG::WP4::CCM::CCfg::getCfgValue('cache_root');
    $group_readable = EDG::WP4::CCM::CCfg::getCfgValue('group_readable');
    $world_readable = EDG::WP4::CCM::CCfg::getCfgValue('world_readable');
}


# Main program

# validate options
Quit("usage: cache-initialise [OPTIONS]
  -d, --debug          turn on debugging
  --config=FILE        location of fetch config file (for cache root)")
    unless (GetOptions('debug' => \$debug, 'config=s' => \$config)
            and scalar @ARGV == 0);

# process config file
Config($config);

# remove any existing cache
rmtree($cache_root, 0, 0);

# make directory structure
my $owner = 0;
my $group = 0;
my $mode = 0700;
my $mask = 077;

if ($group_readable) {
    $mode = 0750;
    $mask = 027;
    $group = getgrnam($group_readable);
    if(! defined) {
        Quit("Invalid group name for group_readable $group_readable");
    };
} elsif ($world_readable) {
    $mode = 0755;
};

my @paths = ($cache_root, "$cache_root/data", "$cache_root/tmp");
foreach my $path (@paths) {
    my $ok = mkdir $cache_root, $mode;
    die "Can't create $path: $!\n" unless $ok;
};

# make sure files are created so only root can see them
umask($mask) if $mask;


# make lock files
open TMP, ">$cache_root/global.lock";
print TMP "no\n";
close TMP;

Quit();

__END__

=head1 NAME

ccm-initialise - initialise local config cache

=head1 DESCRIPTION

Create an initial directory hierarchy for the local config cache, along
with the necessary lock files.

=head1 SYNOPSIS

ccm-initialise [I<OPTIONS>]

=head1 OPTIONS

=over 4

=item B<-d>, B<--debug>

Turn on debugging messages.

=item B<--config>=I<file>

The I<file> is the WP4 local cache configuration file, also used by the
B<fetch> program; cache-initialise uses it to establish the location of
the cache root directory.  If no I<file> is specified, the default path
is /etc/ccm.conf.  If the file is missing or specifies no value
for the cache root, that defaults to /var/lib/ccm.

=back

=cut
