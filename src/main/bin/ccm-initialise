#!/usr/bin/perl -w
# ${license-info}
# ${developer-info}
# ${author-info}
# ${build-info}
#
# Initialise local config cache
#

package ccm_initialise;

use strict;
use warnings;

# required for CAF (Common Application Framework)
BEGIN {
    unshift(@INC, '/usr/lib/perl');
}

use CAF::Application;
use CAF::Reporter;
use LC::Exception qw(SUCCESS throw_error);
our @ISA = qw(CAF::Application CAF::Reporter);

# needed for method overriding
no warnings 'redefine';

#
# application specific options:
#
sub app_options {

    # local lexicals
    my @options;

    # build options
    push (@options,

          { NAME    => 'cfgfile=s',
            HELP    => 'configuration file for ccm-initialise' },

          { NAME    => 'debug|d=i',
            DEFAULT => '0',
            HELP    => 'Turn on debugging messages' });

    return \@options;
}

#
# initialise
#
sub _initialize {

    # local lexicals
    my $self = shift;

    # version and usage
    $self->{'VERSION'} = "${project.version}";
    $self->{'USAGE'}   = sprintf("Usage: %s [OPTIONS...]", $0);

    # initialise
    unless ($self->SUPER::_initialize(@_)) {
        return undef;
    }

    return SUCCESS;
}


#-- Main ---------------------------------------------------------------------------------------------#

package main;


use strict;
use warnings;
use Getopt::Long;
use File::Path;
use EDG::WP4::CCM::CCfg qw(initCfg getCfgValue);
use EDG::WP4::CCM::Fetch::ProfileCache qw(MakeCacheRoot);

$ENV{PATH} = join(":", qw(/bin /usr/bin /sbin /usr/sbin));

our ($this_app);

# unbuffer STDOUT & STDERR
autoflush STDOUT 1;
autoflush STDERR 1;

# initialise main class
unless ($this_app = ccm_initialise->new($0, @ARGV)) {
    throw_error("Cannot start application");
    exit (1);
}

$this_app->verbose("ccm-initialise begin");

# Options
my $cache_root = undef;
my $world_readable = 0;
my $group_readable = undef;

initCfg($this_app->option("cfgfile"));

$cache_root = getCfgValue('cache_root');
$group_readable = getCfgValue('group_readable');
$world_readable = getCfgValue('world_readable');

# remove any existing cache
$this_app->verbose("Removing cache_root $cache_root");
rmtree($cache_root, 0, 0);

# Use Warn for both info and error
$this_app->verbose("Creating cache_root $cache_root and subdirectories");
MakeCacheRoot($cache_root, $group_readable, $world_readable, $this_app);

# make lock files
$this_app->verbose("Creating lockfile");
open TMP, ">$cache_root/global.lock";
print TMP "no\n";
close TMP;

$this_app->verbose("ccm-initialise complete");
exit(0);

__END__

=head1 NAME

ccm-initialise - initialise local config cache

=head1 DESCRIPTION

Create an initial directory hierarchy for the local config cache, along
with the necessary lock files.

=head1 SYNOPSIS

ccm-initialise [I<OPTIONS>]

=head1 OPTIONS

=over 4

=item B<-d>, B<--debug>

Turn on debugging messages.

=item B<--config>=I<file>

The I<file> is the WP4 local cache configuration file, also used by the
B<fetch> program; cache-initialise uses it to establish the location of
the cache root directory.  If no I<file> is specified, the default path
is /etc/ccm.conf.  If the file is missing or specifies no value
for the cache root, that defaults to /var/lib/ccm.

=back

=cut
