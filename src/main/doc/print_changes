#!/usr/bin/perl -w

# EDG prologue

BEGIN {
  $ENV{"EDG_LOCATION"} ||= "/opt/edg";
  $ENV{"EDG_LOCATION_VAR"} ||= $ENV{"EDG_LOCATION"}."/var";
  unshift (@INC, $ENV{"EDG_LOCATION"}."/lib/perl");
}

#
# Example of how to use the NVA library
# Print what has changed when a new profile arrives
# Use: print_changes --cache cache_dir
#
# R. Garcia Leiva (angel.leiva@uam.es)
#

use EDG::WP4::CCM::CacheManager qw ($DATA_DN $GLOBAL_LOCK_FN
                                      $CURRENT_CID_FN $LATEST_CID_FN);
use EDG::WP4::CCM::Path;
use EDG::WP4::CCM::Resource;
use EDG::WP4::CCM::Element;
use Getopt::Long;
use strict;

sub print_diff($$);	# forward declaration

# Compare two elements with the same Path
sub print_diff($$) {

    my ($ele1, $ele2, $new_ele);
    my ($type1, $type2);
    my ($cksum1, $cksum2);
    my (%hash1, %hash2);
    my (@list1, @list2);
    my ($path, $str, $key);

    ($ele1, $ele2) = @_;

    $type1 = $ele1->getType();
    $type2 = $ele2->getType();

    # check if the Element has change its type
    if($type1 != $type2) {
        $path = $ele1->getPath();
	$str = $path->toString();
	print "$str	type has changed\n";
	return;
    }

    # check changes in properties
    if ($ele1->isProperty()) {
        $cksum1 = $ele1->getChecksum();
	$cksum2 = $ele2->getChecksum();
	if ($cksum1 ne $cksum2) {
	    $path = $ele1->getPath();
	    $str = $path->toString();
	    print "$str		checksum has changed\n";
        }
	return;
    }

    # check changes in resources

    if ($ele1->isType(EDG::WP4::CCM::Element::NLIST)) {

        %hash1 = $ele1->getHash();
	%hash2 = $ele2->getHash();

	# common elements
        foreach $key (keys(%hash1)) {
            if (exists($hash2{$key})) {
                print_diff($hash1{$key}, $hash2{$key})
	    }

	}

	# removed elements
	foreach $key (keys(%hash1)) {
	    if (!exists($hash2{$key})) {
                $path = $hash1{$key}->getPath();
	        $str = $path->toString();
	        print "$str		has been removed!\n";
	    }
	}

	# new elements
	foreach $key (keys(%hash2)) {
	    if (!exists($hash1{$key})) {
	        $path = $hash2{$key}->getPath();
	        $str = $path->toString();
	        print "$str		is new!\n";
	    }
	}

    } else {

        # type list
	@list1 = $ele1->getList();
	@list2 = $ele2->getList();

	# common elements
	while(@list1 !=0 && @list2 !=0) {
	    print_diff( pop(@list1), pop(@list2) );
	}

	# removed elements
	foreach $new_ele (@list1) {
	    $path = $new_ele->getPath();
	    $str = $path->toString();
	    print "$str		has been removed!\n";
	}

	# new elements
	foreach $new_ele (@list2) {
	    $path = $new_ele->getPath();
	    $str = $path->toString();
	    print "$str		is new!\n";
	}

    }

}

my ($cache_dir, $cred);
my ($cm, $cfg1, $cfg2);
my ($path, $ele1, $ele2);
my ($cksum1, $cksum2);

$cache_dir  = "";
GetOptions('cache=s'  => \$cache_dir)
    or die("error processing command line: $!");

if ($cache_dir eq "") {
    die("use: $0 --cache cache_dir\n");
}

$cred = 0;

$cm = EDG::WP4::CCM::CacheManager->new($cache_dir);
$path = EDG::WP4::CCM::Path->new("/");

# get current configuration
$cfg1 = $cm->getLockedConfiguration($cred);
$ele1 = $cfg1->getElement($path);
$cksum1 = $ele1->getChecksum();

# wait for a new configuration
while(1) {
    print "Checking for a new profile ... ";
    $cfg2 = $cm->getLockedConfiguration($cred);
    $ele2 = $cfg2->getElement($path);
    $cksum2 = $ele2->getChecksum();
    if( $cksum1 ne $cksum2 ) {
       print "We have got a new profile!\n";
       print_diff($ele1, $ele2);
       last;
    }
    print "not yet, lets wait 10 secs.\n";
    sleep(10);
}

exit(0);
